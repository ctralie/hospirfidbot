driver (
	name "urglaser"
	provides ["laser:1"]
	port "/dev/robot/laser"
)

driver (
	name "roomba"
  	provides ["position2d:0"]
	port "/dev/robot/roomba"
	safe 1
)

# This is used to convert the urglaser format to the sicklaser
# format (default) which I suspect works better with pmaptest
# But I have to be careful to keep the rescanned laser data on 
# robot 0 so pmaptest doesn't get confused (the laser and odometry
# data need to be on the same robot)
driver (
	name "laserrescan"
	requires ["laser:1"]
	provides ["laser:0"]
)


driver
(
  name "mapfile"
  provides ["map:0"]
  filename "logs/map.pgm"
  resolution 0.1
)






driver
(
  name "vfh"
  provides ["6665:position2d:1"]
  requires ["6665:position2d:0" "6665:laser:0"]
  distance_epsilon 0.3
  angle_epsilon 5
)

#driver
#(
#  name "nd"
#  provides ["6665:position2d:1"]
#  requires ["output::6665:position2d:0" "input::6665:position2d:0" "6665:laser:0"]
#)

driver
(
  name "amcl"
  provides ["6665:localize:0" "6665:position2d:2"]
  requires ["odometry:::position2d:0" "6665:laser:0" "laser::6665:map:0"]
)


driver
(
  name "wavefront"
  provides ["6665:planner:0"]
  requires ["output::6665:position2d:1" "input::6665:position2d:2" "6665:map:0"]
  safety_dist 0.15
  distance_epsilon 0.5
  angle_epsilon 10
  alwayson 0
)

